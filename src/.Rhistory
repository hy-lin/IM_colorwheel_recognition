scale_x_continuous(breaks = c(-pi, -pi/2, 0, pi/2, pi), labels = c(expression(-pi), expression(-pi/2), '0', expression(pi/2), expression(pi)))+
jtools::theme_apa() +
theme(legend.position=c(0.8, 0.8))
x = seq(-pi, pi, 0.01)
guessing = rep(1/(2*pi), length(x))
memory = dvonmises(x, mu = 0, kappa = 35)
p_m = 0.7
recall = memory*p_m + guessing*(1-p_m)
guessing = guessing / sum(guessing)
memory = memory / sum(memory)
recall = recall / sum(recall)
mixture_model <- data.frame(cbind(x, guessing, memory, recall))
ggplot(data=mixture_model, aes(x=x)) +
geom_line(aes(y=guessing, colour = 'Guessing'), linetype = 'dashed', size = 1) +
geom_line(aes(y=memory, colour = 'Memory'), linetype = 'dashed', size = 1) +
geom_line(aes(y=recall, colour = 'Recall'), linetype = 'solid', size = 2) +
scale_colour_manual(values=c(Guessing="red", Memory="black", Recall="black")) +
xlab('Deviant from target color') +
ylab('Probability of recall') +
scale_x_continuous(breaks = c(-pi, -pi/2, 0, pi/2, pi), labels = c(expression(-pi), expression(-pi/2), '0', expression(pi/2), expression(pi)))+
jtools::theme_apa() +
theme(legend.position=c(0.8, 0.8))
x = seq(-pi, pi, 0.01)
guessing = rep(1/(2*pi), length(x))
memory = dvonmises(x, mu = 0, kappa = 5)
p_m = 0.7
recall = memory*p_m + guessing*(1-p_m)
guessing = guessing / sum(guessing)
memory = memory / sum(memory)
recall = recall / sum(recall)
mixture_model <- data.frame(cbind(x, guessing, memory, recall))
ggplot(data=mixture_model, aes(x=x)) +
geom_line(aes(y=guessing, colour = 'Guessing'), linetype = 'dashed', size = 1) +
geom_line(aes(y=memory, colour = 'Memory'), linetype = 'dashed', size = 1) +
geom_line(aes(y=recall, colour = 'Recall'), linetype = 'solid', size = 2) +
scale_colour_manual(values=c(Guessing="red", Memory="black", Recall="black")) +
xlab('Deviant from target color') +
ylab('Probability of recall') +
scale_x_continuous(breaks = c(-pi, -pi/2, 0, pi/2, pi), labels = c(expression(-pi), expression(-pi/2), '0', expression(pi/2), expression(pi)))+
jtools::theme_apa() +
theme(legend.position=c(0.8, 0.8))
x = seq(-pi, pi, 0.01)
change = rep(1/(2*pi), length(x))
guessing = rep(1/(2*pi), length(x))
memory = dvonmises(x, mu = 0, kappa = 5)
p_m = 0.7
same = memory*p_m + guessing*(1-p_m)
change = change / sum(change)
same = same / sum(same)
mixture_model <- data.frame(cbind(x, change, same))
ggplot(data=mixture_model, aes(x=x)) +
geom_line(aes(y=change, colour = 'Change'), size = 1) +
geom_line(aes(y=same, colour = 'Same'), size = 1) +
scale_colour_manual(values=c(Change="red", Same="black")) +
xlab('recalled color x') +
ylab('Assumed probability of recall') +
scale_x_continuous(breaks = c(-pi, -pi/2, 0, pi/2, pi), labels = c(expression(-pi), expression(-pi/2), '0', expression(pi/2), expression(pi)))+
jtools::theme_apa() +
theme(legend.position=c(0.8, 0.8))
setwd("~/GitHub/IM_colorwheel_recognition/src/Analysis")
setwd("~/GitHub/IM_colorwheel_recognition/src")
library(ggplot2)
library(BayesFactor)
loadData <- function(exp){
if (exp == 1 | exp == 2){
data <- read.table(sprintf('Data/Experiment%d/recognition%d.dat', exp, exp), header = FALSE, fill = FALSE)
names(data) <- c('ID', 'TrialIndex', 'Setsize', 'TrialCondition',
'ColorTarget', 'LocationTarget',
'ColorNonTarget1', 'LocationNonTarget1',
'ColorNonTarget2', 'LocationNonTarget2',
'ColorNonTarget3', 'LocationNonTarget3',
'ColorNonTarget4', 'LocationNonTarget4',
'ColorNonTarget5', 'LocationNonTarget5',
'ColorProbe', 'LocationProbe',
'Response', 'Correctness', 'RT')
data$TrialCondition <- factor(data$TrialCondition)
}
if (exp == 3){
data <- read.table('Data/Experiment3/recallNrecognition.dat', header = FALSE, fill = FALSE)
names(data) <- c('ID', 'Session', 'SessionCondition',
'TrialIndex', 'TrialType', 'Setsize',
'ProbeType', 'ColorTarget', 'LocationTarget',
'ColorNonTarget1', 'LocationNonTarget1',
'ColorNonTarget2', 'LocationNonTarget2',
'ColorNonTarget3', 'LocationNonTarget3',
'ColorNonTarget4', 'LocationNonTarget4',
'ColorNonTarget5', 'LocationNonTarget5',
'ColorProbe', 'LocationProbe',
'RT', 'Response'
)
}
data$ID <- factor(data$ID)
data$TrialIndex <- factor(data$TrialIndex)
#data$Response <- factor(data$Response)
return(data)
}
loadSimulationData <- function(exp){
data <- read.table(sprintf('Data/fitting result/exp%d.dat', exp, exp), header = FALSE, fill = FALSE)
if (exp == 1 | exp == 2){
names(data) <- c('ID', 'TrialIndex', 'Setsize', 'TrialCondition',
'ColorTarget', 'LocationTarget',
'ColorNonTarget1', 'LocationNonTarget1',
'ColorNonTarget2', 'LocationNonTarget2',
'ColorNonTarget3', 'LocationNonTarget3',
'ColorNonTarget4', 'LocationNonTarget4',
'ColorNonTarget5', 'LocationNonTarget5',
'ColorProbe', 'LocationProbe',
'Response', 'Correctness', 'RT',
'IM', 'SA', 'SB-Binding', 'VP', 'VP-Binding')
data$TrialCondition <- factor(data$TrialCondition)
}
if (exp == 3){
data <- read.table(sprintf('Data/fitting result/exp%d.dat', exp, exp), header = FALSE, fill = FALSE)
names(data) <- c('ID', 'Session', 'SessionCondition',
'TrialIndex', 'TrialType', 'Setsize',
'ProbeType', 'ColorTarget', 'LocationTarget',
'ColorNonTarget1', 'LocationNonTarget1',
'ColorNonTarget2', 'LocationNonTarget2',
'ColorNonTarget3', 'LocationNonTarget3',
'ColorNonTarget4', 'LocationNonTarget4',
'ColorNonTarget5', 'LocationNonTarget5',
'ColorProbe', 'LocationProbe',
'RT', 'Response', 'Correctness',
'MMBayes', 'MMBoundary', 'Murry', 'MMRecall'
)
}
data$ID <- factor(data$ID)
data$TrialIndex <- factor(data$TrialIndex)
data$Response <- factor(data$Response)
return(data)
}
wrapDistance <- function(color1, color2){
dist <- abs(color1-color2)
if (dist >= 180){
dist <- 360 - dist
}
return(dist)
}
classifyProbeType <- function(data, exp){
bins <- seq(0, 180, 20)
data$ProbeType <- 1
data$dissimilarity <- 1
data$dissimilarity_bin <- 1
for (i in 1:length(data$ProbeType)){
if (exp == 1 | exp == 2){
if (data$ColorProbe[i] == data$ColorTarget[i]){
data$ProbeType[i] = 'Same'
data$SimPC[i] = 1-data$IM[i]
}
else {
intrusion = FALSE
if (data$Setsize[i] > 1){
for (l in 1:(data$Setsize[i]-1)){
nontargetvar <- sprintf('ColorNonTarget%d', l)
if (wrapDistance(data$ColorProbe[i], data[i, nontargetvar]) < 13){
intrusion = TRUE
}
}
}
if (intrusion == TRUE){
data$ProbeType[i] = 'Internal Change'
} else{
data$ProbeType[i] = 'External Change'
}
data$SimPC[i] = data$IM[i]
}
data$dissimilarity[i] <- wrapDistance(data$ColorProbe[i], data$ColorTarget[i])
data$dissimilarity_bin[i] <- which.max(data$dissimilarity[i] <= bins)
}
else{
if (data$TrialType[i] == 'recognition'){
if (data$ColorProbe[i] == data$ColorTarget[i]){
data$ProbeType[i] = 'Same'
data$SimPC[i] = 1-data$Murry[i]
}
else {
intrusion = FALSE
if (data$Setsize[i] > 1){
for (l in 1:(data$Setsize[i]-1)){
nontargetvar <- sprintf('ColorNonTarget%d', l)
if (wrapDistance(data$ColorProbe[i], data[i, nontargetvar]) < 13){
intrusion = TRUE
}
}
}
if (intrusion == TRUE){
data$ProbeType[i] = 'Internal Change'
} else{
data$ProbeType[i] = 'External Change'
}
data$SimPC[i] = data$Murry[i]
}
# if (data$ProbeType[i] == 'Same'){
#   if (data$Response[i] == 'True'){
#     data$Correctness[i] <- 1
#     data$Response[i] = 1
#   }else{
#     data$Correctness[i] <- 0
#     data$Response[i] = 0
#   }
# }else{
#   if (data$Response[i] == 'True'){
#     data$Correctness[i] <- 0
#     data$Response[i] = 1
#   }else{
#     data$Correctness[i] <- 1
#     data$Response[i] = 0
#   }
# }
data$dissimilarity[i] <- wrapDistance(data$ColorProbe[i], data$ColorTarget[i])
data$dissimilarity_bin[i] <- which.max(data$dissimilarity[i] <= bins)
}else{
data$Correctness[i] <- wrapDistance(data$ColorTarget[i], data$ColorProbe[i])
data$dissimilarity_bin[i] <- which.max(data$Correctness[i] <= bins)
}
}
}
data$ProbeType <- factor(data$ProbeType)
return(data)
}
exp3.data <- loadSimulationData(3)
exp3.data <- classifyProbeType(exp3.data, 3)
data <- data.frame(aggregate(list(exp3.data$Correctness, exp3.data$SimPC, exp3.data$RT), list(exp3.data$ID,exp3.data$TrialType, exp3.data$SessionCondition, exp3.data$ProbeType, exp3.data$Setsize), mean))
names(data) <- c('ID','TrialType', 'SessionCondition', 'ProbeType', 'Setsize', 'PC', 'Murry', 'RT')
tmp_data <- data.frame(aggregate(list(data[data$TrialType!='recall',]$PC, data[data$TrialType!='recall',]$RT, data[data$TrialType!='recall',]$Murry), list(data[data$TrialType!='recall',]$ProbeType, data[data$TrialType!='recall',]$Setsize), mean))
tmp_data_sd <- data.frame(aggregate(list(data[data$TrialType!='recall',]$PC, data[data$TrialType!='recall',]$RT), list(data[data$TrialType!='recall',]$ProbeType, data[data$TrialType!='recall',]$Setsize), sd))
tmp_data[, 6] <- tmp_data_sd[, 3] / sqrt(20)
tmp_data[, 7] <- tmp_data_sd[, 4] / sqrt(20)
names(tmp_data) <- c('ProbeType', 'Setsize', 'PC', 'RT', 'Murry', 'PC_SE', 'RT_SE')
pd <- position_dodge(.1)
ggplot(data=tmp_data) + aes(x=Setsize, y = PC, linetype = ProbeType) +
geom_line(position = pd, size = 1) +
geom_errorbar(aes(ymin=PC-PC_SE, ymax=PC+PC_SE), width=.1, position = pd, size = 1) +
geom_point(position = pd, size = 1) +
geom_line(position = pd, aes(x=Setsize, y = Murry, linetype = ProbeType, group = ProbeType), color = 'red', size = 1) +
xlab('Set Size') +
ylab('Propotion of Correct')
ggplot(data=tmp_data) + aes(x=Setsize, y = PC, linetype = ProbeType) +
geom_line(position = pd, size = 1) +
geom_errorbar(aes(ymin=PC-PC_SE, ymax=PC+PC_SE), width=.1, position = pd, size = 1) +
geom_point(position = pd, size = 1) +
#geom_line(position = pd, aes(x=Setsize, y = Murry, linetype = ProbeType, group = ProbeType), color = 'red', size = 1) +
xlab('Set Size') +
ylab('Propotion of Correct')
library(jtools)
ggplot(data=tmp_data) + aes(x=Setsize, y = PC, linetype = ProbeType) +
geom_line(position = pd, size = 1) +
geom_errorbar(aes(ymin=PC-PC_SE, ymax=PC+PC_SE), width=.1, position = pd, size = 1) +
geom_point(position = pd, size = 1) +
#geom_line(position = pd, aes(x=Setsize, y = Murry, linetype = ProbeType, group = ProbeType), color = 'red', size = 1) +
xlab('Set Size') +
ylab('Propotion of Correct') +
jtools::theme_apa()
View(data)
source('~/GitHub/IM_colorwheel_recognition/src/Analysis/AccuracyAnalysisExp3.R')
tmp_data <- data.frame(aggregate(list(data[data$TrialType!='recall',]$PC, data[data$TrialType!='recall',]$RT), list(data[data$TrialType!='recall',]$ProbeType, data[data$TrialType!='recall',]$Setsize), mean))
tmp_data_sd <- data.frame(aggregate(list(data[data$TrialType!='recall',]$PC, data[data$TrialType!='recall',]$RT), list(data[data$TrialType!='recall',]$ProbeType, data[data$TrialType!='recall',]$Setsize), sd))
tmp_data[, 5] <- tmp_data_sd[, 3] / sqrt(20)
tmp_data[, 6] <- tmp_data_sd[, 4] / sqrt(20)
names(tmp_data) <- c('ProbeType', 'Setsize', 'PC', 'RT', 'PC_SE', 'RT_SE')
pd <- position_dodge(.1)
ggplot(data=tmp_data) + aes(x=Setsize, y = PC, linetype = ProbeType) +
geom_line(position = pd, size = 1) +
geom_errorbar(aes(ymin=PC-PC_SE, ymax=PC+PC_SE), width=.1, position = pd, size = 1) +
geom_point(position = pd, size = 1) +
#geom_line(position = pd, aes(x=Setsize, y = Murry, linetype = ProbeType, group = ProbeType), color = 'red', size = 1) +
xlab('Set Size') +
ylab('Propotion of Correct') +
jtools::theme_apa()
View(loadData)
View(tmp_data)
View(tmp_data_sd)
View(data)
View(exp3.data)
View(data)
source('~/GitHub/IM_colorwheel_recognition/src/Analysis/AccuracyAnalysisExp3.R')
View(data)
ggplot(data=tmp_data) + aes(x=Setsize, y = PC, linetype = ProbeType) +
geom_line(position = pd, size = 1) +
geom_errorbar(aes(ymin=PC-PC_SE, ymax=PC+PC_SE), width=.1, position = pd, size = 1) +
geom_point(position = pd, size = 1) +
#geom_line(position = pd, aes(x=Setsize, y = Murry, linetype = ProbeType, group = ProbeType), color = 'red', size = 1) +
xlab('Set Size') +
ylab('Propotion of Correct') +
jtools::theme_apa()
## recognition
data <- data.frame(aggregate(list(exp3.data$Correctness, exp3.data$RT), list(exp3.data$ID,exp3.data$TrialType, exp3.data$SessionCondition, exp3.data$ProbeType, exp3.data$Setsize), mean))
names(data) <- c('ID','TrialType', 'SessionCondition', 'ProbeType', 'Setsize', 'PC', 'RT')
pure_recognition_data <- data[data$TrialType!='recall' & data$SessionCondition =='recognition',]
tmp_data <- data.frame(aggregate(list(pure_recognition_data$PC, pure_recognition_data$RT), list(pure_recognition_data$ProbeType, pure_recognition_data$Setsize), mean))
tmp_data_sd <- data.frame(aggregate(list(pure_recognition_data$PC, pure_recognition_data$RT), list(pure_recognition_data$ProbeType, pure_recognition_data$Setsize), sd))
tmp_data[, 5] <- tmp_data_sd[, 3] / sqrt(20)
tmp_data[, 6] <- tmp_data_sd[, 4] / sqrt(20)
names(tmp_data) <- c('ProbeType', 'Setsize', 'PC', 'RT', 'PC_SE', 'RT_SE')
pd <- position_dodge(.1)
pure_recognition = ggplot(data=tmp_data) + aes(x=Setsize, y = PC, linetype = ProbeType) +
geom_line(position = pd, size = 1) +
geom_errorbar(aes(ymin=PC-PC_SE, ymax=PC+PC_SE), width=.1, position = pd, size = 1) +
geom_point(position = pd, size = 1) +
#geom_line(position = pd, aes(x=Setsize, y = Murry, linetype = ProbeType, group = ProbeType), color = 'red', size = 1) +
xlab('Set Size') +
ylab('Propotion of Correct') +
jtools::theme_apa()
pure_recognition
mixed_data <- data[data$TrialType!='recall' & data$SessionCondition =='mix',]
tmp_data <- data.frame(aggregate(list(mixed_data$PC, mixed_data$RT), list(mixed_data$ProbeType, mixed_data$Setsize), mean))
tmp_data_sd <- data.frame(aggregate(list(mixed_data$PC, mixed_data$RT), list(mixed_data$ProbeType, mixed_data$Setsize), sd))
tmp_data[, 5] <- tmp_data_sd[, 3] / sqrt(20)
tmp_data[, 6] <- tmp_data_sd[, 4] / sqrt(20)
names(tmp_data) <- c('ProbeType', 'Setsize', 'PC', 'RT', 'PC_SE', 'RT_SE')
pd <- position_dodge(.1)
mix_recognition = ggplot(data=tmp_data) + aes(x=Setsize, y = PC, linetype = ProbeType) +
geom_line(position = pd, size = 1) +
geom_errorbar(aes(ymin=PC-PC_SE, ymax=PC+PC_SE), width=.1, position = pd, size = 1) +
geom_point(position = pd, size = 1) +
#geom_line(position = pd, aes(x=Setsize, y = Murry, linetype = ProbeType, group = ProbeType), color = 'red', size = 1) +
xlab('Set Size') +
ylab('Propotion of Correct') +
jtools::theme_apa()
mix_recognition
plot_grid(pure_recognition, mix_recognition, nrow=1, ncol = 2)
install.packages("cowplot")
library(cowplot)
plot_grid(pure_recognition, mix_recognition, nrow=1, ncol = 2)
pure_recognition_data <- data[data$TrialType!='recall' & data$SessionCondition =='recognition',]
tmp_data <- data.frame(aggregate(list(pure_recognition_data$PC, pure_recognition_data$RT), list(pure_recognition_data$ProbeType, pure_recognition_data$Setsize), mean))
tmp_data_sd <- data.frame(aggregate(list(pure_recognition_data$PC, pure_recognition_data$RT), list(pure_recognition_data$ProbeType, pure_recognition_data$Setsize), sd))
tmp_data[, 5] <- tmp_data_sd[, 3] / sqrt(20)
tmp_data[, 6] <- tmp_data_sd[, 4] / sqrt(20)
names(tmp_data) <- c('ProbeType', 'Setsize', 'PC', 'RT', 'PC_SE', 'RT_SE')
pd <- position_dodge(.1)
pure_recognition = ggplot(data=tmp_data) + aes(x=Setsize, y = PC, linetype = ProbeType) +
geom_line(position = pd, size = 1) +
geom_errorbar(aes(ymin=PC-PC_SE, ymax=PC+PC_SE), width=.1, position = pd, size = 1) +
geom_point(position = pd, size = 1) +
#geom_line(position = pd, aes(x=Setsize, y = Murry, linetype = ProbeType, group = ProbeType), color = 'red', size = 1) +
xlab('Set Size') +
ylab('Propotion of Correct') +
theme(legend.position=c(0.2, 0.8)) +
jtools::theme_apa()
mixed_data <- data[data$TrialType!='recall' & data$SessionCondition =='mix',]
tmp_data <- data.frame(aggregate(list(mixed_data$PC, mixed_data$RT), list(mixed_data$ProbeType, mixed_data$Setsize), mean))
tmp_data_sd <- data.frame(aggregate(list(mixed_data$PC, mixed_data$RT), list(mixed_data$ProbeType, mixed_data$Setsize), sd))
tmp_data[, 5] <- tmp_data_sd[, 3] / sqrt(20)
tmp_data[, 6] <- tmp_data_sd[, 4] / sqrt(20)
names(tmp_data) <- c('ProbeType', 'Setsize', 'PC', 'RT', 'PC_SE', 'RT_SE')
pd <- position_dodge(.1)
mix_recognition = ggplot(data=tmp_data) + aes(x=Setsize, y = PC, linetype = ProbeType) +
geom_line(position = pd, size = 1) +
geom_errorbar(aes(ymin=PC-PC_SE, ymax=PC+PC_SE), width=.1, position = pd, size = 1) +
geom_point(position = pd, size = 1) +
#geom_line(position = pd, aes(x=Setsize, y = Murry, linetype = ProbeType, group = ProbeType), color = 'red', size = 1) +
xlab('Set Size') +
ylab('Propotion of Correct') +
theme(legend.position=c(0.2, 0.8)) +
jtools::theme_apa()
plot_grid(pure_recognition, mix_recognition, nrow=1, ncol = 2)
plot_grid(pure_recognition, mix_recognition, nrow=1, ncol = 2)
mixed_data <- data[data$TrialType!='recall' & data$SessionCondition =='mix',]
tmp_data <- data.frame(aggregate(list(mixed_data$PC, mixed_data$RT), list(mixed_data$ProbeType, mixed_data$Setsize), mean))
tmp_data_sd <- data.frame(aggregate(list(mixed_data$PC, mixed_data$RT), list(mixed_data$ProbeType, mixed_data$Setsize), sd))
tmp_data[, 5] <- tmp_data_sd[, 3] / sqrt(20)
tmp_data[, 6] <- tmp_data_sd[, 4] / sqrt(20)
names(tmp_data) <- c('ProbeType', 'Setsize', 'PC', 'RT', 'PC_SE', 'RT_SE')
pd <- position_dodge(.1)
mix_recognition = ggplot(data=tmp_data) + aes(x=Setsize, y = PC, linetype = ProbeType) +
geom_line(position = pd, size = 1) +
geom_errorbar(aes(ymin=PC-PC_SE, ymax=PC+PC_SE), width=.1, position = pd, size = 1) +
geom_point(position = pd, size = 1) +
#geom_line(position = pd, aes(x=Setsize, y = Murry, linetype = ProbeType, group = ProbeType), color = 'red', size = 1) +
xlab('Set Size') +
ylab('Propotion of Correct') +
theme(legend.position=c(0.2, 0.8)) +
jtools::theme_apa()
plot_grid(pure_recognition, mix_recognition, nrow=1, ncol = 2)
pure_recognition = ggplot(data=tmp_data) + aes(x=Setsize, y = PC, linetype = ProbeType) +
geom_line(position = pd, size = 1) +
geom_errorbar(aes(ymin=PC-PC_SE, ymax=PC+PC_SE), width=.1, position = pd, size = 1) +
geom_point(position = pd, size = 1) +
#geom_line(position = pd, aes(x=Setsize, y = Murry, linetype = ProbeType, group = ProbeType), color = 'red', size = 1) +
xlab('Set Size') +
ylab('Propotion of Correct') +
jtools::theme_apa() +
theme(legend.position=c(0.2, 0.8))
mix_recognition = ggplot(data=tmp_data) + aes(x=Setsize, y = PC, linetype = ProbeType) +
geom_line(position = pd, size = 1) +
geom_errorbar(aes(ymin=PC-PC_SE, ymax=PC+PC_SE), width=.1, position = pd, size = 1) +
geom_point(position = pd, size = 1) +
#geom_line(position = pd, aes(x=Setsize, y = Murry, linetype = ProbeType, group = ProbeType), color = 'red', size = 1) +
xlab('Set Size') +
ylab('Propotion of Correct') +
jtools::theme_apa() +
theme(legend.position=c(0.2, 0.8))
plot_grid(pure_recognition, mix_recognition, nrow=1, ncol = 2)
pure_recognition = ggplot(data=tmp_data) + aes(x=Setsize, y = PC, linetype = ProbeType) +
geom_line(position = pd, size = 1) +
geom_errorbar(aes(ymin=PC-PC_SE, ymax=PC+PC_SE), width=.1, position = pd, size = 1) +
geom_point(position = pd, size = 1) +
#geom_line(position = pd, aes(x=Setsize, y = Murry, linetype = ProbeType, group = ProbeType), color = 'red', size = 1) +
xlab('Set Size') +
ylab('Propotion of Correct') +
jtools::theme_apa() +
theme(legend.position=c(0.2, 0.2))
mix_recognition = ggplot(data=tmp_data) + aes(x=Setsize, y = PC, linetype = ProbeType) +
geom_line(position = pd, size = 1) +
geom_errorbar(aes(ymin=PC-PC_SE, ymax=PC+PC_SE), width=.1, position = pd, size = 1) +
geom_point(position = pd, size = 1) +
#geom_line(position = pd, aes(x=Setsize, y = Murry, linetype = ProbeType, group = ProbeType), color = 'red', size = 1) +
xlab('Set Size') +
ylab('Propotion of Correct') +
jtools::theme_apa() +
theme(legend.position=c(0.2, 0.2))
plot_grid(pure_recognition, mix_recognition, nrow=1, ncol = 2)
pure_recognition = ggplot(data=tmp_data) + aes(x=Setsize, y = PC, linetype = ProbeType) +
geom_line(position = pd, size = 1) +
geom_errorbar(aes(ymin=PC-PC_SE, ymax=PC+PC_SE), width=.1, position = pd, size = 1) +
geom_point(position = pd, size = 1) +
#geom_line(position = pd, aes(x=Setsize, y = Murry, linetype = ProbeType, group = ProbeType), color = 'red', size = 1) +
xlab('Set Size') +
ylab('Propotion of Correct') +
jtools::theme_apa() +
theme(legend.position=c(0.3, 0.2))
mix_recognition = ggplot(data=tmp_data) + aes(x=Setsize, y = PC, linetype = ProbeType) +
geom_line(position = pd, size = 1) +
geom_errorbar(aes(ymin=PC-PC_SE, ymax=PC+PC_SE), width=.1, position = pd, size = 1) +
geom_point(position = pd, size = 1) +
#geom_line(position = pd, aes(x=Setsize, y = Murry, linetype = ProbeType, group = ProbeType), color = 'red', size = 1) +
xlab('Set Size') +
ylab('Propotion of Correct') +
jtools::theme_apa() +
theme(legend.position=c(0.3, 0.2))
plot_grid(pure_recognition, mix_recognition, nrow=1, ncol = 2)
pure_recognition_data <- data[data$TrialType!='recall' & data$SessionCondition =='recognition',]
tmp_data <- data.frame(aggregate(list(pure_recognition_data$PC, pure_recognition_data$RT), list(pure_recognition_data$ProbeType, pure_recognition_data$Setsize), mean))
tmp_data_sd <- data.frame(aggregate(list(pure_recognition_data$PC, pure_recognition_data$RT), list(pure_recognition_data$ProbeType, pure_recognition_data$Setsize), sd))
tmp_data[, 5] <- tmp_data_sd[, 3] / sqrt(20)
tmp_data[, 6] <- tmp_data_sd[, 4] / sqrt(20)
names(tmp_data) <- c('ProbeType', 'Setsize', 'PC', 'RT', 'PC_SE', 'RT_SE')
pd <- position_dodge(.1)
pure_recognition = ggplot(data=tmp_data) + aes(x=Setsize, y = PC, linetype = ProbeType) +
geom_line(position = pd, size = 1) +
geom_errorbar(aes(ymin=PC-PC_SE, ymax=PC+PC_SE), width=.1, position = pd, size = 1) +
geom_point(position = pd, size = 1) +
#geom_line(position = pd, aes(x=Setsize, y = Murry, linetype = ProbeType, group = ProbeType), color = 'red', size = 1) +
xlab('Set Size') +
ylab('Propotion of Correct') +
jtools::theme_apa() +
theme(legend.position=c(0.3, 0.2))
mixed_data <- data[data$TrialType!='recall' & data$SessionCondition =='mix',]
tmp_data <- data.frame(aggregate(list(mixed_data$PC, mixed_data$RT), list(mixed_data$ProbeType, mixed_data$Setsize), mean))
tmp_data_sd <- data.frame(aggregate(list(mixed_data$PC, mixed_data$RT), list(mixed_data$ProbeType, mixed_data$Setsize), sd))
tmp_data[, 5] <- tmp_data_sd[, 3] / sqrt(20)
tmp_data[, 6] <- tmp_data_sd[, 4] / sqrt(20)
names(tmp_data) <- c('ProbeType', 'Setsize', 'PC', 'RT', 'PC_SE', 'RT_SE')
pd <- position_dodge(.1)
mix_recognition = ggplot(data=tmp_data) + aes(x=Setsize, y = PC, linetype = ProbeType) +
geom_line(position = pd, size = 1) +
geom_errorbar(aes(ymin=PC-PC_SE, ymax=PC+PC_SE), width=.1, position = pd, size = 1) +
geom_point(position = pd, size = 1) +
#geom_line(position = pd, aes(x=Setsize, y = Murry, linetype = ProbeType, group = ProbeType), color = 'red', size = 1) +
xlab('Set Size') +
ylab('Propotion of Correct') +
jtools::theme_apa() +
theme(legend.position=c(0.3, 0.2))
plot_grid(pure_recognition, mix_recognition, nrow=1, ncol = 2)
pure_recall_data <- data[data$TrialType=='recall' & data$SessionCondition =='recall',]
tmp_data <- data.frame(aggregate(list(pure_recall_data$PC, pure_recall_data$RT), list(pure_recall_data$Setsize), mean))
tmp_data_sd <- data.frame(aggregate(list(pure_recall_data$PC, pure_recall_data$RT), list(pure_recall_data$Setsize), sd))
tmp_data[, 4] <- tmp_data_sd[, 2] / sqrt(20)
tmp_data[, 5] <- tmp_data_sd[, 3] / sqrt(20)
names(tmp_data) <- c('Setsize', 'Accuracy', 'RT', 'PC_SE', 'RT_SE')
pure_recall = ggplot(data=tmp_data) + aes(x=Setsize, y = Accuracy) +
geom_line(position = pd, size = 1) +
geom_errorbar(aes(ymin=Accuracy-PC_SE, ymax=Accuracy+PC_SE), width=.1, position = pd, size = 1) +
geom_point(position = pd, size = 1) +
#geom_line(position = pd, aes(x=Setsize, y = Murry, linetype = ProbeType, group = ProbeType), color = 'red', size = 1) +
xlab('Set Size') +
ylab('Accuracy') +
jtools::theme_apa() +
theme(legend.position=c(0.3, 0.2))
pure_recall
View(tmp_data)
recall_data <- data[data$TrialType=='recall',]
tmp_data <- data.frame(aggregate(list(pure_recall$PC, pure_recall$RT), list(pure_recall$Setsize, pure_recall$SessionCondition), mean))
View(recall_data)
recall_data <- data[data$TrialType=='recall',]
tmp_data <- data.frame(aggregate(list(recall_data$PC, recall_data$RT), list(recall_data$Setsize, recall_data$SessionCondition), mean))
tmp_data_sd <- data.frame(aggregate(list(recall_data$PC, recall_data$RT), list(recall_data$Setsize, recall_data$SessionCondition), sd))
tmp_data[, 5] <- tmp_data_sd[, 3] / sqrt(20)
tmp_data[, 6] <- tmp_data_sd[, 4] / sqrt(20)
names(tmp_data) <- c('Setsize', 'SessionCondition', 'Accuracy', 'RT', 'PC_SE', 'RT_SE')
View(tmp_data)
pure_recall = ggplot(data=tmp_data) + aes(x=Setsize, y = Accuracy, linetype = SessionCondition) +
geom_line(position = pd, size = 1) +
geom_errorbar(aes(ymin=Accuracy-PC_SE, ymax=Accuracy+PC_SE), width=.1, position = pd, size = 1) +
geom_point(position = pd, size = 1) +
#geom_line(position = pd, aes(x=Setsize, y = Murry, linetype = ProbeType, group = ProbeType), color = 'red', size = 1) +
xlab('Set Size') +
ylab('Accuracy') +
jtools::theme_apa() +
theme(legend.position=c(0.3, 0.2))
pure_recall
pure_recall = ggplot(data=tmp_data) + aes(x=Setsize, y = Accuracy, linetype = SessionCondition) +
geom_line(position = pd, size = 1) +
geom_errorbar(aes(ymin=Accuracy-PC_SE, ymax=Accuracy+PC_SE), width=.1, position = pd, size = 1) +
geom_point(position = pd, size = 1) +
#geom_line(position = pd, aes(x=Setsize, y = Murry, linetype = ProbeType, group = ProbeType), color = 'red', size = 1) +
xlab('Set Size') +
ylab('Accuracy') +
jtools::theme_apa() +
theme(legend.position=c(0.3, 0.8))
pure_recall
