if (wrapDistance(data$ColorProbe[i], data[i, nontargetvar]) < 13){
intrusion = TRUE
}
}
}
if (intrusion == TRUE){
data$ProbeType[i] = 'Internal Change'
} else{
data$ProbeType[i] = 'External Change'
}
data$SimPC[i] = data$IM[i]
}
if (data$ProbeType[i] == 'Same'){
if (data$Response[i] == 'True'){
data$Correctness[i] <- 1
}else{
data$Correctness[i] <- 0
}
}else{
if (data$Response[i] == 'True'){
data$Correctness[i] <- 0
}else{
data$Correctness[i] <- 1
}
}
}else{
data$Correctness[i] <- wrapDistance(data$ColorTarget[i], data$ColorProbe[i])
}
}
}
data$ProbeType <- factor(data$ProbeType)
return(data)
}
exp1.data <- loadData(1)
exp1.data <- classifyProbeType(exp1.data, 1)
debugSource('~/GitHub/IM_colorwheel_recognition/src/Analysis/AccuracyAnalysis.R', echo=TRUE)
View(data)
data$TrialCondition[i]
classifyProbeType <- function(data, exp){
data$ProbeType <- 1
data$dissimilarity <- 1
for (i in 1:length(data$ProbeType)){
if (exp == 2 | exp == 1){
if (exp == 1){
if (data$TrialCondition[i] == 1){
data$ProbeType[i] = 'Same'
}else{
if (data$TrialCondition[i] == 2){
data$ProbeType[i] = 'External Change'
}
else{
data$ProbeType[i] = 'Internal Change'
}
}
data$dissimilarity[i] <- wrapDistance(data$ColorProbe[i], data$ColorTarget[i])
}else{
if (data$ColorProbe[i] == data$ColorTarget[i]){
data$ProbeType[i] = 'Same'
data$SimPC[i] = 1-data$IM[i]
}
else {
intrusion = FALSE
if (data$Setsize[i] > 1){
for (l in 1:(data$Setsize[i]-1)){
nontargetvar <- sprintf('ColorNonTarget%d', l)
if (wrapDistance(data$ColorProbe[i], data[i, nontargetvar]) < 13){
intrusion = TRUE
}
}
}
if (intrusion == TRUE){
data$ProbeType[i] = 'Internal Change'
} else{
data$ProbeType[i] = 'External Change'
}
data$SimPC[i] = data$IM[i]
}
data$dissimilarity[i] <- wrapDistance(data$ColorProbe[i], data$ColorTarget[i])
}
}
else{
if (data$TrialType[i] == 'recognition'){
if (data$ColorProbe[i] == data$ColorTarget[i]){
data$ProbeType[i] = 'Same'
data$SimPC[i] = 1-data$IM[i]
}
else {
intrusion = FALSE
if (data$Setsize[i] > 1){
for (l in 1:(data$Setsize[i]-1)){
nontargetvar <- sprintf('ColorNonTarget%d', l)
if (wrapDistance(data$ColorProbe[i], data[i, nontargetvar]) < 13){
intrusion = TRUE
}
}
}
if (intrusion == TRUE){
data$ProbeType[i] = 'Internal Change'
} else{
data$ProbeType[i] = 'External Change'
}
data$SimPC[i] = data$IM[i]
}
if (data$ProbeType[i] == 'Same'){
if (data$Response[i] == 'True'){
data$Correctness[i] <- 1
}else{
data$Correctness[i] <- 0
}
}else{
if (data$Response[i] == 'True'){
data$Correctness[i] <- 0
}else{
data$Correctness[i] <- 1
}
}
}else{
data$Correctness[i] <- wrapDistance(data$ColorTarget[i], data$ColorProbe[i])
}
}
}
data$ProbeType <- factor(data$ProbeType)
return(data)
}
exp1.data <- loadData(1)
exp1.data <- classifyProbeType(exp1.data, 1)
data <- data.frame(aggregate(list(exp2.data$Correctness, exp2.data$RT), list(exp2.data$ID, exp2.data$ProbeType, exp2.data$Setsize), mean))
data2 <- data.frame(aggregate(list(exp2.data$Correctness, exp2.data$RT), list(exp2.data$ID, exp2.data$ProbeType, exp2.data$Setsize), mean))
names(data) <- c('ID', 'ProbeType', 'Setsize', 'PC', 'RT')
data1 <- data.frame(aggregate(list(exp1.data$Correctness, exp1.data$RT), list(exp1.data$ID, exp1.data$ProbeType, exp1.data$Setsize), mean))
names(data) <- c('ID', 'ProbeType', 'Setsize', 'PC', 'RT')
data2 <- data.frame(aggregate(list(exp2.data$Correctness, exp2.data$RT), list(exp2.data$ID, exp2.data$ProbeType, exp2.data$Setsize), mean))
names(data2) <- c('ID', 'ProbeType', 'Setsize', 'PC', 'RT')
data1 <- data.frame(aggregate(list(exp1.data$Correctness, exp1.data$RT), list(exp1.data$ID, exp1.data$ProbeType, exp1.data$Setsize), mean))
names(data1) <- c('ID', 'ProbeType', 'Setsize', 'PC', 'RT')
data2 <- data.frame(aggregate(list(exp2.data$Correctness, exp2.data$RT), list(exp2.data$ID, exp2.data$ProbeType, exp2.data$Setsize), mean))
exp2.data <- loadData(2)
exp2.data <- classifyProbeType(exp2.data, 2)
data2 <- data.frame(aggregate(list(exp2.data$Correctness, exp2.data$RT), list(exp2.data$ID, exp2.data$ProbeType, exp2.data$Setsize), mean))
names(data2) <- c('ID', 'ProbeType', 'Setsize', 'PC', 'RT')
View(data1)
classifyProbeType <- function(data, exp){
data$ProbeType <- 1
data$dissimilarity <- 1
data$exp <- 1
for (i in 1:length(data$ProbeType)){
if (exp == 2 | exp == 1){
if (exp == 1){
if (data$TrialCondition[i] == 1){
data$ProbeType[i] = 'Same'
}else{
if (data$TrialCondition[i] == 2){
data$ProbeType[i] = 'External Change'
}
else{
data$ProbeType[i] = 'Internal Change'
}
}
data$dissimilarity[i] <- wrapDistance(data$ColorProbe[i], data$ColorTarget[i])
data$exp <- 1
}else{
if (data$ColorProbe[i] == data$ColorTarget[i]){
data$ProbeType[i] = 'Same'
data$SimPC[i] = 1-data$IM[i]
}
else {
intrusion = FALSE
if (data$Setsize[i] > 1){
for (l in 1:(data$Setsize[i]-1)){
nontargetvar <- sprintf('ColorNonTarget%d', l)
if (wrapDistance(data$ColorProbe[i], data[i, nontargetvar]) < 13){
intrusion = TRUE
}
}
}
if (intrusion == TRUE){
data$ProbeType[i] = 'Internal Change'
} else{
data$ProbeType[i] = 'External Change'
}
data$SimPC[i] = data$IM[i]
}
data$dissimilarity[i] <- wrapDistance(data$ColorProbe[i], data$ColorTarget[i])
data$exp <- 2
}
}
else{
if (data$TrialType[i] == 'recognition'){
if (data$ColorProbe[i] == data$ColorTarget[i]){
data$ProbeType[i] = 'Same'
data$SimPC[i] = 1-data$IM[i]
}
else {
intrusion = FALSE
if (data$Setsize[i] > 1){
for (l in 1:(data$Setsize[i]-1)){
nontargetvar <- sprintf('ColorNonTarget%d', l)
if (wrapDistance(data$ColorProbe[i], data[i, nontargetvar]) < 13){
intrusion = TRUE
}
}
}
if (intrusion == TRUE){
data$ProbeType[i] = 'Internal Change'
} else{
data$ProbeType[i] = 'External Change'
}
data$SimPC[i] = data$IM[i]
}
if (data$ProbeType[i] == 'Same'){
if (data$Response[i] == 'True'){
data$Correctness[i] <- 1
}else{
data$Correctness[i] <- 0
}
}else{
if (data$Response[i] == 'True'){
data$Correctness[i] <- 0
}else{
data$Correctness[i] <- 1
}
}
}else{
data$Correctness[i] <- wrapDistance(data$ColorTarget[i], data$ColorProbe[i])
}
}
}
data$ProbeType <- factor(data$ProbeType)
data$exp <- factor(data$exp)
return(data)
}
exp2.data <- loadData(2)
exp2.data <- classifyProbeType(exp2.data, 2)
exp1.data <- loadData(1)
exp1.data <- classifyProbeType(exp1.data, 1)
exp.data <- c(exp1.data, exp2.data)
View(exp.data)
View(exp.data)
View(data1)
loadSimulationData <- function(exp){
data <- read.table(sprintf('Data/fitting result/exp%d.dat', exp, exp), header = FALSE, fill = FALSE)
names(data) <- c('ID', 'TrialIndex', 'Setsize', 'TrialCondition',
'ColorTarget', 'LocationTarget',
'ColorNonTarget1', 'LocationNonTarget1',
'ColorNonTarget2', 'LocationNonTarget2',
'ColorNonTarget3', 'LocationNonTarget3',
'ColorNonTarget4', 'LocationNonTarget4',
'ColorNonTarget5', 'LocationNonTarget5',
'ColorProbe', 'LocationProbe',
'Response', 'Correctness', 'RT',
'IM', 'SA', 'SB-Binding', 'VP', 'VP-Binding')
#data$ID <- factor(data$ID)
data$TrialIndex <- factor(data$TrialIndex)
data$TrialCondition <- factor(data$TrialCondition)
data$Response <- factor(data$Response)
return(data)
}
wrapDistance <- function(color1, color2){
dist <- abs(color1-color2)
if (dist >= 180){
dist <- 360 - dist
}
return(dist)
}
classifyProbeType <- function(data, exp){
data$ProbeType <- 1
data$dissimilarity <- 1
data$exp <- 1
for (i in 1:length(data$ProbeType)){
if (exp == 2 | exp == 1){
if (exp == 1){
if (data$TrialCondition[i] == 1){
data$ProbeType[i] = 'Same'
}else{
if (data$TrialCondition[i] == 2){
data$ProbeType[i] = 'External Change'
}
else{
data$ProbeType[i] = 'Internal Change'
}
}
data$dissimilarity[i] <- wrapDistance(data$ColorProbe[i], data$ColorTarget[i])
data$exp <- 1
data$ID[i] <- data$ID[i] + 100
}else{
if (data$ColorProbe[i] == data$ColorTarget[i]){
data$ProbeType[i] = 'Same'
data$SimPC[i] = 1-data$IM[i]
}
else {
intrusion = FALSE
if (data$Setsize[i] > 1){
for (l in 1:(data$Setsize[i]-1)){
nontargetvar <- sprintf('ColorNonTarget%d', l)
if (wrapDistance(data$ColorProbe[i], data[i, nontargetvar]) < 13){
intrusion = TRUE
}
}
}
if (intrusion == TRUE){
data$ProbeType[i] = 'Internal Change'
} else{
data$ProbeType[i] = 'External Change'
}
data$SimPC[i] = data$IM[i]
}
data$dissimilarity[i] <- wrapDistance(data$ColorProbe[i], data$ColorTarget[i])
data$exp <- 2
data$ID[i] <- data$ID[i] + 200
}
}
else{
if (data$TrialType[i] == 'recognition'){
if (data$ColorProbe[i] == data$ColorTarget[i]){
data$ProbeType[i] = 'Same'
data$SimPC[i] = 1-data$IM[i]
}
else {
intrusion = FALSE
if (data$Setsize[i] > 1){
for (l in 1:(data$Setsize[i]-1)){
nontargetvar <- sprintf('ColorNonTarget%d', l)
if (wrapDistance(data$ColorProbe[i], data[i, nontargetvar]) < 13){
intrusion = TRUE
}
}
}
if (intrusion == TRUE){
data$ProbeType[i] = 'Internal Change'
} else{
data$ProbeType[i] = 'External Change'
}
data$SimPC[i] = data$IM[i]
}
if (data$ProbeType[i] == 'Same'){
if (data$Response[i] == 'True'){
data$Correctness[i] <- 1
}else{
data$Correctness[i] <- 0
}
}else{
if (data$Response[i] == 'True'){
data$Correctness[i] <- 0
}else{
data$Correctness[i] <- 1
}
}
}else{
data$Correctness[i] <- wrapDistance(data$ColorTarget[i], data$ColorProbe[i])
}
}
}
data$ProbeType <- factor(data$ProbeType)
data$exp <- factor(data$exp)
return(data)
}
loadData <- function(exp){
if (exp == 1){
data <- read.table(sprintf('Data/Experiment%d/recognition%d.dat', exp, exp), header = FALSE, fill = FALSE)
names(data) <- c('ID', 'SessionIndex', 'TrialIndex', 'Setsize',
'ColorTarget', 'LocationTarget',
'ColorNonTarget1', 'LocationNonTarget1',
'ColorNonTarget2', 'LocationNonTarget2',
'ColorNonTarget3', 'LocationNonTarget3',
'ColorNonTarget4', 'LocationNonTarget4',
'ColorNonTarget5', 'LocationNonTarget5',
'TrialCondition', 'ColorProbe',
'Response', 'RT', 'Correctness')
data$TrialCondition <- factor(data$TrialCondition)
}
if (exp == 2){
data <- read.table(sprintf('Data/Experiment%d/recognition%d.dat', exp, exp), header = FALSE, fill = FALSE)
names(data) <- c('ID', 'TrialIndex', 'Setsize', 'TrialCondition',
'ColorTarget', 'LocationTarget',
'ColorNonTarget1', 'LocationNonTarget1',
'ColorNonTarget2', 'LocationNonTarget2',
'ColorNonTarget3', 'LocationNonTarget3',
'ColorNonTarget4', 'LocationNonTarget4',
'ColorNonTarget5', 'LocationNonTarget5',
'ColorProbe', 'LocationProbe',
'Response', 'Correctness', 'RT')
data$TrialCondition <- factor(data$TrialCondition)
}
if (exp == 3){
data <- read.table('Data/Experiment3/recallNrecognition.dat', header = FALSE, fill = FALSE)
names(data) <- c('ID', 'Session', 'SessionCondition',
'TrialIndex', 'TrialType', 'Setsize',
'ProbeType', 'ColorTarget', 'LocationTarget',
'ColorNonTarget1', 'LocationNonTarget1',
'ColorNonTarget2', 'LocationNonTarget2',
'ColorNonTarget3', 'LocationNonTarget3',
'ColorNonTarget4', 'LocationNonTarget4',
'ColorNonTarget5', 'LocationNonTarget5',
'ColorProbe', 'LocationProbe',
'RT', 'Response'
)
}
#data$ID <- factor(data$ID)
data$TrialIndex <- factor(data$TrialIndex)
data$Response <- factor(data$Response)
return(data)
}
exp2.data <- loadData(2)
exp2.data <- classifyProbeType(exp2.data, 2)
View(exp2.data)
exp1.data <- loadData(1)
exp1.data <- classifyProbeType(exp1.data, 1)
exp.data <- rbined(exp1.data, exp2.data)
exp.data <- rbind(exp1.data, exp2.data)
names(exp1.data)
names(exp2.data)
exp2.data$LocationProbe <- NULL
exp1.data$SessionIndex <- NULL
exp.data <- rbind(exp1.data, exp2.data)
View(exp.data)
exp.data$ID <- factor(exp.data$ID)
data <- data.frame(aggregate(list(exp.data$Correctness, exp.data$RT), list(exp.data$ID, exp.data$exp, exp.data$ProbeType, exp.data$Setsize), mean))
names(data) <- c('ID', 'Exp', 'ProbeType', 'Setsize', 'PC', 'RT')
View(data)
anovaBF(PC ~ Exp + ProbeType*Setsize + ID, whichRandom = ID, data = data)
names(data) <- c('ID', 'Exp', 'ProbeType', 'Setsize', 'PC', 'RT')
anovaBF(PC ~ Exp + ProbeType*Setsize + ID, whichRandom = ID, data = data)
anovaBF(PC ~ Exp + ProbeType*Setsize + ID, whichRandom = 'ID', data = data)
data$Setsize <- factor(data$Setsize)
anovaBF(PC ~ Exp + ProbeType*Setsize + ID, whichRandom = 'ID', data = data)
data <- data.frame(aggregate(list(exp.data$Correctness, exp.data$RT), list(exp.data$ID, exp.data$exp, exp.data$ProbeType, exp.data$Setsize), mean))
names(data) <- c('ID', 'Exp', 'ProbeType', 'Setsize', 'PC', 'RT')
# Exp effect
exp0 <- lmBF(PC ~ Exp + ID + ProbeType*Setsize, whichRandom = 'ID', data = data)
# Exp effect
exp0 <- lmBF(PC ~ ID + ProbeType*Setsize, whichRandom = 'ID', data = data)
exp1 <- lmBF(PC ~ Exp + ID + ProbeType*Setsize, whichRandom = 'ID', data = data)
exp0/exp1
tmp_data <- data.frame(aggregate(list(data$PC, data$RT), list(data$ProbeType, data$Setsize), mean))
tmp_data_sd <- data.frame(aggregate(list(data$PC, data$RT), list(data$ProbeType, data$Setsize), sd))
tmp_data[, 5] <- tmp_data_sd[, 3] / sqrt(20)
tmp_data[, 6] <- tmp_data_sd[, 4] / sqrt(20)
names(tmp_data) <- c('ProbeType', 'Setsize', 'PC', 'RT', 'PC_SE', 'RT_SE')
pd <- position_dodge(.1)
ggplot(data=tmp_data) + aes(x=Setsize, y = PC, linetype = ProbeType) +
geom_line(position = pd, size = 1) +
geom_errorbar(aes(ymin=PC-PC_SE, ymax=PC+PC_SE), width=.1, position = pd, size = 1) +
geom_point(position = pd, size = 1) +
# geom_line(position = pd, aes(x=Setsize, y = IM, linetype = ProbeType, group = ProbeType), color = 'red', size = 1) +
xlab('Set Size') +
ylab('Propotion of Correct') +
theme(text = element_text(size=14)) +
theme(legend.text = element_text(size=14))
pd <- position_dodge(.1)
ggplot(data=tmp_data) + aes(x=Setsize, y = RT, linetype = ProbeType, group = ProbeType) +
geom_line(position = pd, size = 1) +
geom_errorbar(aes(ymin=RT-RT_SE, ymax=RT+RT_SE), width=.1, position = pd, size = 1) +
geom_point(position = pd, size = 1) +
xlab('Set Size') +
ylab('Reaction Time (s)')
# Probetype * Setsize
no.effect <- lmBF(PC ~ ID, whichRandom = 'ID', data = data)
setsize <- lmBF(PC ~ Setsize + ID, whichRandom = 'ID', data = data)
probetype <- lmBF(PC ~ Probetype + ID, whichRandom = 'ID', data = data)
setsize <- lmBF(PC ~ Setsize + ID, whichRandom = 'ID', data = data)
probetype <- lmBF(PC ~ Probetype + ID, whichRandom = 'ID', data = data)
probetype <- lmBF(PC ~ ProbeType + ID, whichRandom = 'ID', data = data)
probetype.setsize <- lmBF(PC ~ Setsize*ProbeType + ID, whichRandom = 'ID', data = data)
probetype.setsize <- lmBF(PC ~ Setsize + ProbeType + ID, whichRandom = 'ID', data = data)
interaction <- lmBF(PC ~ Setsize*ProbeType + ID, whichRandom = 'ID', data = data)
#### setsize
setsize/no.effect
#### setsize
setsize/no.effect
#### probetype
probetype/no.effect
#### interaction
interaction/probetype.setsize
data = data[,data$ProbeType!='Same']
data = data[data$ProbeType!='Same',]
data
data <- data.frame(aggregate(list(exp.data$Correctness, exp.data$RT), list(exp.data$ID, exp.data$exp, exp.data$ProbeType, exp.data$Setsize), mean))
names(data) <- c('ID', 'Exp', 'ProbeType', 'Setsize', 'PC', 'RT')
# intrusion cost
no.effect <- lmBF(PC ~ ID, whichRandom = 'ID', data = data[,data$ProbeType!='Same'])
setsize <- lmBF(PC ~ Setsize + ID, whichRandom = 'ID', data = data[,data$ProbeType!='Same'])
probetype <- lmBF(PC ~ ProbeType + ID, whichRandom = 'ID', data = data[,data$ProbeType!='Same'])
probetype.setsize <- lmBF(PC ~ Setsize + ProbeType + ID, whichRandom = 'ID', data = data[,data$ProbeType!='Same'])
#### setsize
setsize/no.effect
#### probetype
probetype/no.effect
#### interaction
interaction/probetype.setsize
no.effect <- lmBF(PC ~ ID, whichRandom = 'ID', data = data[data$ProbeType!='Same', ])
setsize <- lmBF(PC ~ Setsize + ID, whichRandom = 'ID', data = data[data$ProbeType!='Same', ])
probetype <- lmBF(PC ~ ProbeType + ID, whichRandom = 'ID', data = data[data$ProbeType!='Same', ])
probetype.setsize <- lmBF(PC ~ Setsize + ProbeType + ID, whichRandom = 'ID', data = data[data$ProbeType!='Same', ])
interaction <- lmBF(PC ~ Setsize*ProbeType + ID, whichRandom = 'ID', data = data[data$ProbeType!='Same', ])
#### setsize
setsize/no.effect
#### probetype
probetype/no.effect
#### interaction
interaction/probetype.setsize
# Probetype * Setsize
no.effect <- lmBF(PC ~ ID, whichRandom = 'ID', data = data)
setsize <- lmBF(PC ~ Setsize + ID, whichRandom = 'ID', data = data)
probetype <- lmBF(PC ~ ProbeType + ID, whichRandom = 'ID', data = data)
probetype.setsize <- lmBF(PC ~ Setsize + ProbeType + ID, whichRandom = 'ID', data = data)
interaction <- lmBF(PC ~ Setsize*ProbeType + ID, whichRandom = 'ID', data = data)
#### setsize
setsize/no.effect
#### probetype
probetype/no.effect
#### interaction
interaction/probetype.setsize
